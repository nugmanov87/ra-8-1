{"version":3,"sources":["components/List.jsx","components/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["List","handleProfile","useState","names","setNames","select","setSelect","useEffect","axios","get","process","then","res","data","catch","err","console","log","className","map","id","name","key","shortid","generate","onClick","handleSelect","Details","info","setData","src","avatar","alt","Object","keys","details","App","profile","setProfile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PA0CeA,EArCF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAENF,mBAAS,IAFH,mBAE3BG,EAF2B,KAEnBC,EAFmB,KAIlCC,qBAAU,WACRC,IACGC,IADH,UACUC,uGADV,eAEGC,MAAK,SAACC,GAAD,OAASR,EAASQ,EAAIC,SAC3BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAOH,OACE,yBAAKG,UAAU,YACb,yBAAKA,UAAU,mCACZf,EAAMgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,yBACEH,UAAS,wBAAmBE,IAAOf,EAAS,SAAW,IACvDiB,IAAKC,IAAQC,WACbC,QAAS,kBAZE,SAACL,EAAIC,GACxBf,EAAUc,GACVnB,EAAcmB,EAAIC,GAUKK,CAAaN,EAAIC,KAEhC,yBAAKH,UAAU,UAAUG,UCatBM,EAtCC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACJ1B,mBAAS,MADL,mBACrBW,EADqB,KACfgB,EADe,KAY5B,OATAtB,qBAAU,WACHqB,EAAKR,IAEVZ,IACGC,IADH,UACUC,wGADV,OAC8CkB,EAAKR,GADnD,UAEGT,MAAK,SAACC,GAAD,OAASiB,EAAQjB,EAAIC,SAC1BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,CAACa,EAAKR,GAAIP,IAERA,EAGH,yBAAKK,UAAU,eACb,yBAAKA,UAAU,SACb,yBAAKY,IAAKjB,EAAKkB,OAAQC,IAAI,YAE7B,yBAAKd,UAAU,WACb,uBAAGA,UAAU,UAAUL,EAAKQ,MAC3BY,OAAOC,KAAKrB,EAAKsB,SAAShB,KAAI,SAACG,GAAD,OAC7B,yBAAKJ,UAAU,cAAcI,IAAKC,IAAQC,YACxC,2BAAIF,GADN,KACiBT,EAAKsB,QAAQb,SAXpB,MCULc,MAvBf,WAAgB,IAAD,EACiBlC,mBAAS,CAAEkB,GAAI,KAAMC,KAAM,KAD5C,mBACNgB,EADM,KACGC,EADH,KAOb,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAMjB,cATM,SAACmB,EAAIC,GACzBiB,EAAW,CAAElB,KAAIC,aAUX,yBAAKH,UAAU,qBACZmB,EAAU,kBAAC,EAAD,CAAST,KAAMS,IAAc,UCPhCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.1d94923e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nconst List = ({ handleProfile }) => {\n  const [names, setNames] = useState([]);\n  const [select, setSelect] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_INITIAL_URL}users.json`)\n      .then((res) => setNames(res.data))\n      .catch((err) => console.log(err));\n  }, []);\n\n  const handleSelect = (id, name) => {\n    setSelect(id);\n    handleProfile(id, name);\n  };\n\n  return (\n    <div className=\"ui basic\">\n      <div className=\"ui vertical menu button primary\">\n        {names.map(({ id, name }) => (\n          <div\n            className={`link red item ${id === select ? \"active\" : \"\"}`}\n            key={shortid.generate()}\n            onClick={() => handleSelect(id, name)}\n          >\n            <div className=\"header\">{name}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nList.propTypes = {\n  handleProfile: PropTypes.func.isRequired,\n};\n\nexport default List;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport axios from \"axios\";\n\nconst Details = ({ info }) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    if (!info.id) return;\n\n    axios\n      .get(`${process.env.REACT_APP_INITIAL_URL}${info.id}.json`)\n      .then((res) => setData(res.data))\n      .catch((err) => console.log(err));\n  }, [info.id, data]);\n\n  if (!data) return null;\n\n  return (\n    <div className=\"ui red card\">\n      <div className=\"image\">\n        <img src={data.avatar} alt=\"avatar\" />\n      </div>\n      <div className=\"content\">\n        <p className=\"header\">{data.name}</p>\n        {Object.keys(data.details).map((key) => (\n          <div className=\"description\" key={shortid.generate()}>\n            <b>{key}</b>: {data.details[key]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  info: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }),\n};\n\nexport default Details;\n","import React, { useState } from \"react\";\nimport List from \"./components/List\";\nimport Details from \"./components/Details\";\n\nfunction App() {\n  const [profile, setProfile] = useState({ id: null, name: \"\" });\n\n  const handleProfile = (id, name) => {\n    setProfile({ id, name });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui raised very text container\">\n        <div className=\"ui grid\">\n          <div className=\"eight wide column\">\n            <List handleProfile={handleProfile} />\n          </div>\n          <div className=\"eight wide column\">\n            {profile ? <Details info={profile} /> : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}